// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurante {
  id                  String          @id @default(uuid())
  nome                String
  slug                String
  descricao           String
  imagemAvatarURL     String
  capaImagemAvatarURL String
  produtos            Produto[]
  pedidos             Pedido[]
  categoriasMenu      categoriaMenu[]
  criadoEm            DateTime        @default(now())
  atualizadoEm        DateTime        @updatedAt
}

model categoriaMenu {
  id            String      @id @default(uuid())
  nome          String
  restaurante   Restaurante @relation(fields: [idRestaurante], references: [id])
  idRestaurante String
  produtos      Produto[]
  criadoEm      DateTime    @default(now())
  atualizadoEm  DateTime    @updatedAt
}

model Produto {
  id              String           @id @default(uuid())
  nome            String
  descricao       String
  preco           Float
  idRestaurante   String
  idCategoriaMenu String
  ingredientes    String[]
  pedidoProdutos  pedidoProdutos[]
  restaurante     Restaurante      @relation(fields: [idRestaurante], references: [id])
  categoriaMenu   categoriaMenu    @relation(fields: [idCategoriaMenu], references: [id])
  urlImagem       String
  criadoEm        DateTime         @default(now())
  atualizadoEm    DateTime         @updatedAt
}

model Pedido {
  id             Int              @id @default(autoincrement())
  total          Float
  idRestaurante  String
  restaurante    Restaurante      @relation(fields: [idRestaurante], references: [id])
  statusPedido   Status
  metodoConsumo  Metodo
  pedidoProdutos pedidoProdutos[]
}

model pedidoProdutos {
  id           String   @id @default(uuid())
  produto      Produto  @relation(fields: [idProduto], references: [id])
  idProduto    String
  pedido       Pedido   @relation(fields: [idPedido], references: [id])
  idPedido     Int
  quantidade   Int
  preco        Float
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

enum Status {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum Metodo {
  TAKEAWAY
  DINE_IN
}
